//-- Generated by org.jetbrains.kotlin.idea.gradleJava.testing.KotlinTestTasksResolver
// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
import groovy.xml.MarkupBuilder
import org.gradle.api.tasks.testing.TestDescriptor
import org.gradle.api.tasks.testing.TestListener
import org.gradle.api.tasks.testing.TestOutputEvent
import org.gradle.api.tasks.testing.TestOutputListener
import org.gradle.api.tasks.testing.TestResult
import org.gradle.api.internal.tasks.testing.TestDescriptorInternal

class KotlinMppTestLogger {
    static def configureTestEventLogging(def task) {
        task.addTestListener(new TestListener() {
            @Override
            void beforeSuite(TestDescriptor descriptor) {
                logTestEvent("beforeSuite", (TestDescriptorInternal)descriptor, null, null)
            }

            @Override
            void afterSuite(TestDescriptor descriptor, TestResult result) {
                logTestEvent("afterSuite", (TestDescriptorInternal)descriptor, null, result)
            }

            @Override
            void beforeTest(TestDescriptor descriptor) {
                logTestEvent("beforeTest", (TestDescriptorInternal)descriptor, null, null)
            }

            @Override
            void afterTest(TestDescriptor descriptor, TestResult result) {
                logTestEvent("afterTest", (TestDescriptorInternal)descriptor, null, result)
            }
        })

        task.addTestOutputListener(new TestOutputListener() {
            @Override
            void onOutput(TestDescriptor descriptor, TestOutputEvent event) {
                logTestEvent("onOutput", (TestDescriptorInternal)descriptor, event, null)
            }
        })
    }

    static def logTestEvent(testEventType, TestDescriptorInternal testDescriptor, testEvent, testResult) {
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
        xml.event(type: testEventType) {
            test(id: testDescriptor.id, parentId: testDescriptor.parent?.id ?: '') {
                if (testDescriptor) {
                    descriptor(
                            name: testDescriptor.name ?: '',
                            displayName: getName(testDescriptor) ?: '',
                            className: testDescriptor.className ?: ''
                    )
                }
                if (testEvent) {
                    def message = escapeCdata(testEvent.message)
                    event(destination: testEvent.destination) {
                        xml.mkp.yieldUnescaped("$message")
                    }
                }
                if (testResult) {
                    def errorMsg = escapeCdata(testResult.exception?.message ?: '')
                    def stackTrace = escapeCdata(getStackTrace(testResult.exception))
                    result(resultType: testResult.resultType ?: '', startTime: testResult.startTime, endTime: testResult.endTime) {
                        def exception = testResult.exception
                        if (exception?.message?.trim()) xml.mkp.yieldUnescaped("<errorMsg>$errorMsg</errorMsg>")
                        if (exception) xml.mkp.yieldUnescaped("<stackTrace>$stackTrace</stackTrace>")

                        if ('kotlin.AssertionError'.equals(exception?.class?.name) || exception instanceof AssertionError) {
                            failureType('assertionFailed')
                            return
                        }

                        failureType('error')
                    }
                }
            }
        }

        writeLog(writer.toString())
    }

    static String escapeCdata(String s) {
        return "<![CDATA[" + s?.getBytes("UTF-8")?.encodeBase64()?.toString() + "]]>";
    }

    static def wrap(String s) {
        if (!s) return s;
        s.replaceAll("\r\n|\n\r|\n|\r", "<ijLogEol/>\n")
    }

    static def writeLog(s) {
        println String.format("\n<ijLog>%s</ijLog>", wrap(s))
    }

    static def logTestReportLocation(def report) {
        if (!report) return
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
        xml.event(type: 'reportLocation', testReport: report)
        writeLog(writer.toString());
    }

    static def logConfigurationError(aTitle, aMessage, boolean openSettings) {
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
        xml.event(type: 'configurationError', openSettings: openSettings) {
            title(aTitle)
            message(aMessage)
        }
        writeLog(writer.toString());
    }

    static def getStackTrace(Throwable t) {
        if (!t) return ''
        StringWriter sw = new StringWriter()
        t.printStackTrace(new PrintWriter(sw))
        sw.toString()
    }

    static def getName(TestDescriptorInternal descriptor) {
        try {
            return descriptor.getDisplayName() // available starting from ver. 4.10.3
        }
        catch (Throwable ignore) {
            return descriptor.getName()
        }
    }
}
//
//-- Generated by com.android.tools.utp.GradleAndroidProjectResolverExtension
/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.lang.reflect.Proxy

/**
 * An action to attach a listener to DeviceProviderInstrumentTestTasks for communicating
 * instrumentation test results between AGP and AS.
 */
class SetupUtpTestResultListenerAction implements Action<TaskExecutionGraph> {

  @Override
  void execute(TaskExecutionGraph taskGraph) {
    final String ENABLE_UTP_TEST_REPORT_PROPERTY = "com.android.tools.utp.GradleAndroidProjectResolverExtension.enable"
    final String ON_RESULT_TAG = "UTP_TEST_RESULT_ON_TEST_RESULT_EVENT"

    taskGraph.allTasks.each { task ->
      if (!task.project.hasProperty(ENABLE_UTP_TEST_REPORT_PROPERTY) ||
          !task.project.property(ENABLE_UTP_TEST_REPORT_PROPERTY).toString().toBoolean()) {
        return
      }

      Class<?> testTaskClass
      try {
        testTaskClass = task.class.classLoader.loadClass(
          "com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask")
      } catch (ClassNotFoundException e) {
        return
      }

      if (!testTaskClass.isInstance(task)) {
        return
      }

      Class<?> listenerClass
      try {
        listenerClass = task.class.classLoader.loadClass(
          "com.android.build.gradle.internal.testing.utp.UtpTestResultListener")
      } catch (ClassNotFoundException e) {
        // Project's AGP version is too old and UtpTestResultListener is not available.
        return
      }

      def listener = Proxy.newProxyInstance(
        listenerClass.classLoader,
        [ listenerClass ] as Class<?>[]) { _, method, args ->
        switch(method.name) {
          case "onTestResultEvent":
            def binaryProto = args[0].class.getMethod("toByteArray").invoke(args[0]) as byte[]
            def encodedProto = Base64.getEncoder().encodeToString(binaryProto)
            println("<${ON_RESULT_TAG}>${encodedProto}</${ON_RESULT_TAG}>")
            break
        }
      }

      def setListenerMethod = testTaskClass.getMethod(
        "setUtpTestResultListener", listenerClass)

      setListenerMethod.invoke(task, listener)
    }
  }
}

gradle.taskGraph.whenReady(new SetupUtpTestResultListenerAction())

//